// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(cuid())
  email              String   @unique
  password           String
  companyName        String
  companyLink        String
  companyDescription String?
  profilePic         String?
  karma              Int      @default(30)
  isApproved         Boolean  @default(false)
  inviteCode         String?  @unique
  invitedBy          String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  ads         Ad[]
  clicks      Click[]
  posts       Post[]
  comments    Comment[]
  invitedUsers User[] @relation("UserInvites")
  inviter     User?   @relation("UserInvites", fields: [invitedBy], references: [id])

  @@map("users")
}

model Ad {
  id          String   @id @default(cuid())
  userId      String
  headline    String
  description String
  imageUrl    String?
  linkUrl     String
  isActive    Boolean  @default(true)
  isDeleted   Boolean  @default(false)
  impressions Int      @default(0)
  clicks      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User    @relation(fields: [userId], references: [id])
  clickLogs  Click[]

  @@map("ads")
}

model Click {
  id        String   @id @default(cuid())
  adId      String
  userId    String?
  ipAddress String
  userAgent String?
  country   String?
  createdAt DateTime @default(now())

  ad   Ad   @relation(fields: [adId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  @@unique([adId, ipAddress, createdAt])
  @@map("clicks")
}

model Post {
  id        String   @id @default(cuid())
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  comments Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("comments")
}

model InviteCode {
  id        String   @id @default(cuid())
  code      String   @unique
  createdBy String
  usedBy    String?
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  usedAt    DateTime?

  @@map("invite_codes")
}

model InviteRequest {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("invite_requests")
}
